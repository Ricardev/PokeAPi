// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pokemon;

#nullable disable

namespace Pokemon.Migrations
{
    [DbContext(typeof(PokemonContext))]
    [Migration("20230325002225_Primeira_Migration_Pokemon_DB")]
    partial class Primeira_Migration_Pokemon_DB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("AbilityEntityPokemonEntity", b =>
                {
                    b.Property<int>("AbilitiesAbilityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PokemonsEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AbilitiesAbilityId", "PokemonsEntityId");

                    b.HasIndex("PokemonsEntityId");

                    b.ToTable("AbilityEntityPokemonEntity");
                });

            modelBuilder.Entity("Pokemon.Entities.AbilityEntity", b =>
                {
                    b.Property<int>("AbilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AbilityId");

                    b.ToTable("AbilityTable", (string)null);
                });

            modelBuilder.Entity("Pokemon.Entities.PokemonAbility", b =>
                {
                    b.Property<int>("PokemonAbilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AbilityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PokemonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PokemonAbilityId");

                    b.HasIndex("AbilityId");

                    b.HasIndex("PokemonId");

                    b.ToTable("PokemonAbilityTable", (string)null);
                });

            modelBuilder.Entity("Pokemon.Entities.PokemonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PokemonTable", (string)null);
                });

            modelBuilder.Entity("Pokemon.Entities.PokemonType", b =>
                {
                    b.Property<int>("PokemonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PokemonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PokemonTypeId");

                    b.HasIndex("PokemonId");

                    b.HasIndex("TypeId");

                    b.ToTable("PokemonTypeTable", (string)null);
                });

            modelBuilder.Entity("Pokemon.Entities.TypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TypeTable", (string)null);
                });

            modelBuilder.Entity("PokemonEntityTypeEntity", b =>
                {
                    b.Property<int>("PokemonEntitiesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PokemonEntitiesId", "TypesId");

                    b.HasIndex("TypesId");

                    b.ToTable("PokemonEntityTypeEntity");
                });

            modelBuilder.Entity("AbilityEntityPokemonEntity", b =>
                {
                    b.HasOne("Pokemon.Entities.AbilityEntity", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pokemon.Entities.PokemonEntity", null)
                        .WithMany()
                        .HasForeignKey("PokemonsEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pokemon.Entities.PokemonAbility", b =>
                {
                    b.HasOne("Pokemon.Entities.AbilityEntity", "Ability")
                        .WithMany("PokemonsAbility")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pokemon.Entities.PokemonEntity", "Pokemon")
                        .WithMany("PokemonAbilities")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("Pokemon.Entities.PokemonType", b =>
                {
                    b.HasOne("Pokemon.Entities.PokemonEntity", "Pokemon")
                        .WithMany("PokemonTypes")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pokemon.Entities.TypeEntity", "Type")
                        .WithMany("PokemonsTypes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pokemon");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PokemonEntityTypeEntity", b =>
                {
                    b.HasOne("Pokemon.Entities.PokemonEntity", null)
                        .WithMany()
                        .HasForeignKey("PokemonEntitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pokemon.Entities.TypeEntity", null)
                        .WithMany()
                        .HasForeignKey("TypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pokemon.Entities.AbilityEntity", b =>
                {
                    b.Navigation("PokemonsAbility");
                });

            modelBuilder.Entity("Pokemon.Entities.PokemonEntity", b =>
                {
                    b.Navigation("PokemonAbilities");

                    b.Navigation("PokemonTypes");
                });

            modelBuilder.Entity("Pokemon.Entities.TypeEntity", b =>
                {
                    b.Navigation("PokemonsTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
